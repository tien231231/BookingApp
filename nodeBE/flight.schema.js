const mongoose = require("mongoose");

const Schema = mongoose.Schema;

// Tao schema dk model (kieu du lieu chuan cua tung document trong colletion)
const flightSchema = new Schema({
  id: Schema.Types.String,
  flyFrom: Schema.Types.String,
  flyTo: Schema.Types.String,
  cityFrom: Schema.Types.String,
  cityCodeFrom: Schema.Types.String,
  cityTo: Schema.Types.String,
  cityCodeTo: Schema.Types.String,
  countryFrom: {
    code: Schema.Types.String,
    name: Schema.Types.String,
  },
  countryTo: {
    code: Schema.Types.String,
    name: Schema.Types.String,
  },
  nightsInDest: Schema.Types.Boolean,
  quality: Schema.Types.Number,
  distance: Schema.Types.Number,
  duration: {
    departure: Schema.Types.Number,
    return: Schema.Types.Number,
    total: Schema.Types.Number,
  },
  price: Schema.Types.Number,
  conversion: {
    EUR: Schema.Types.Number,
    USD: Schema.Types.Number,
  },
  fare: {
    adults: Schema.Types.Number,
    children: Schema.Types.Number,
    infants: Schema.Types.Number,
  },
  bags_price: {
    1: Schema.Types.Number,
  },
  baglimit: {
    hand_height: Schema.Types.Number,
    hand_length: Schema.Types.Number,
    hand_weight: Schema.Types.Number,
    hand_width: Schema.Types.Number,
    hold_dimensions_sum: Schema.Types.Number,
    hold_height: Schema.Types.Number,
    hold_length: Schema.Types.Number,
    hold_weight: Schema.Types.Number,
    hold_width: Schema.Types.Number,
    personal_item_height: Schema.Types.Number,
    personal_item_length: Schema.Types.Number,
    personal_item_weight: Schema.Types.Number,
    personal_item_width: Schema.Types.Number,
  },
  availability: {
    seats: Schema.Types.Number,
  },
  airlines: [],
  route: [
    {
      id: Schema.Types.String,
      combination_id: Schema.Types.String,
      flyFrom: Schema.Types.String,
      flyTo: Schema.Types.String,
      cityFrom: Schema.Types.String,
      cityCodeFrom: Schema.Types.String,
      cityTo: Schema.Types.String,
      cityCodeTo: Schema.Types.String,
      airline: Schema.Types.String,
      flight_no: Schema.Types.Number,
      operating_carrier: Schema.Types.String,
      operating_flight_no: Schema.Types.Number,
      fare_basis: Schema.Types.String,
      fare_category: Schema.Types.String,
      fare_classes: Schema.Types.String,
      fare_family: Schema.Types.String,
      return: Schema.Types.Number,
      bags_recheck_required: Schema.Types.Boolean,
      vi_connection: Schema.Types.Boolean,
      guarantee: Schema.Types.Boolean,
      equipment: Schema.Types.Boolean,
      vehicle_type: Schema.Types.String,
      local_arrival: Schema.Types.Date,
      utc_arrival: Schema.Types.Date,
      local_departure: Schema.Types.Date,
      utc_departure: Schema.Types.Date,
    },
  ],
  booking_token: Schema.Types.String,
  deep_link: Schema.Types.String,
  facilitated_booking_available: Schema.Types.Boolean,
  pnr_count: Schema.Types.Number,
  has_airport_change: Schema.Types.Boolean,
  technical_stops: Schema.Types.Number,
  throw_away_ticketing: Schema.Types.Boolean,
  hidden_city_ticketing: Schema.Types.Boolean,
  virtual_interlining: Schema.Types.Boolean,
  local_arrival: Schema.Types.Date,
  utc_arrival: Schema.Types.Date,
  local_departure: Schema.Types.Date,
  utc_departure: Schema.Types.Date,
  logo: Schema.Types.String,
  rating: Schema.Types.Number,
  commend: Schema.Types.String,
  review: Schema.Types.Number,
  type: Schema.Types.String,
  flightTime: Schema.Types.String,
  gate: Schema.Types.String,
  seatNo: Schema.Types.Number,
  trip: Schema.Types.String,
  departureTime: Schema.Types.Number,
  departureHour: Schema.Types.Number,
  arrivalTime: Schema.Types.Number,
  airlineName: Schema.Types.String,
  airlineImage: Schema.Types.String,
  discount: Schema.Types.Number,
  taxes: Schema.Types.Number,
  service: Schema.Types.Number,
  class: Schema.Types.String,
});

//Tao model (User collection dc tao trong db tuhocMongoose)
const flightModel = mongoose.model("flights", flightSchema);
module.exports = flightModel;
